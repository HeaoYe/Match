set(BUILD_SHARED_LIBS OFF)
find_package(Vulkan REQUIRED GLOBAL)

option(GLM_BUILD_LIBRARY "Build dynamic/static library" OFF)
option(GLM_BUILD_TESTS "Build the test programs" OFF)
option(GLM_ENABLE_CXX_98 "Enable C++ 98" OFF)
option(GLM_ENABLE_CXX_11 "Enable C++ 11" OFF)
option(GLM_ENABLE_CXX_14 "Enable C++ 14" OFF)
option(GLM_ENABLE_CXX_17 "Enable C++ 17" ON)
option(GLM_ENABLE_CXX_20 "Enable C++ 20" OFF)
option(GLM_ENABLE_LANG_EXTENSIONS "Enable language extensions" OFF)
option(GLM_DISABLE_AUTO_DETECTION "Disable platform, compiler, arch and C++ language detection" OFF)
add_subdirectory(glm)

option(SPDLOG_BUILD_ALL "Build all artifacts" OFF)
option(SPDLOG_BUILD_SHARED "Build shared library" OFF)
option(SPDLOG_ENABLE_PCH "Build static or shared library using precompiled header to speed up compilation time" OFF)
option(SPDLOG_BUILD_PIC "Build position independent code (-fPIC)" OFF)
option(SPDLOG_BUILD_EXAMPLE "Build example" OFF)
option(SPDLOG_BUILD_EXAMPLE_HO "Build header only example" OFF)
option(SPDLOG_BUILD_TESTS "Build tests" OFF)
option(SPDLOG_BUILD_TESTS_HO "Build tests using the header only version" OFF)
option(SPDLOG_BUILD_BENCH "Build benchmarks (Requires https://github.com/google/benchmark.git to be installed)" OFF)
option(SPDLOG_SANITIZE_ADDRESS "Enable address sanitizer in tests" OFF)
option(SPDLOG_BUILD_WARNINGS "Enable compiler warnings" OFF)
option(SPDLOG_SYSTEM_INCLUDES "Include as system headers (skip for clang-tidy)." ON)
option(SPDLOG_INSTALL "Generate the install target" OFF)
option(SPDLOG_USE_STD_FORMAT "Use std::format instead of fmt library." OFF)
option(SPDLOG_FMT_EXTERNAL "Use external fmt library instead of bundled" OFF)
option(SPDLOG_FMT_EXTERNAL_HO "Use external fmt header-only library instead of bundled" OFF)
option(SPDLOG_NO_EXCEPTIONS "Compile with -fno-exceptions. Call abort() on any spdlog exceptions" OFF)
add_subdirectory(spdlog)

set(BUILD_SHARED_LIBS ON)
option(GLFW_BUILD_EXAMPLES "Build the GLFW example programs" OFF)
option(GLFW_BUILD_TESTS "Build the GLFW test programs" OFF)
option(GLFW_BUILD_DOCS "Build the GLFW documentation" OFF)
option(GLFW_INSTALL "Generate installation target" OFF)
add_subdirectory(glfw)
set(BUILD_SHARED_LIBS OFF)

add_subdirectory(VulkanMemoryAllocator)
add_subdirectory(glslang)

option(TINYGLTF_BUILD_LOADER_EXAMPLE "Build loader_example(load glTF and dump infos)" OFF)
option(TINYGLTF_BUILD_GL_EXAMPLES "Build GL exampels(requires glfw, OpenGL, etc)" OFF)
option(TINYGLTF_BUILD_VALIDATOR_EXAMPLE "Build validator exampe" OFF)
option(TINYGLTF_BUILD_BUILDER_EXAMPLE "Build glTF builder example" OFF)
option(TINYGLTF_HEADER_ONLY "On: header-only mode. Off: create tinygltf library(No TINYGLTF_IMPLEMENTATION required in your project)" OFF)
option(TINYGLTF_INSTALL "Install tinygltf files during install step. Usually set to OFF if you include tinygltf through add_subdirectory()" OFF)
add_subdirectory(tinygltf)
# set(BUILD_SHARED_LIBS ON)

add_subdirectory(imgui)

add_subdirectory(tinyobjloader)

if (MATCH_SUPPORT_KTX)
    option(KTX_FEATURE_TOOLS "Create KTX tools" ON )
    option(KTX_FEATURE_DOC "Create KTX documentation." OFF )
    option(KTX_FEATURE_JNI "Create Java bindings for libktx." OFF )
    option(KTX_FEATURE_PY "Create Python source distribution." OFF )
    option(KTX_FEATURE_TESTS "Create unit tests." OFF )
    option(KTX_FEATURE_TOOLS_CTS "Enable KTX CLI Tools CTS tests (requires CTS submodule)." OFF )
    option(KTX_FEATURE_KTX1 "Enable KTX 1 support." ON )
    option(KTX_FEATURE_KTX2 "Enable KTX 2 support." ON )
    option(KTX_FEATURE_VK_UPLOAD "Enable Vulkan texture upload." ON )
    option(KTX_FEATURE_GL_UPLOAD "Enable OpenGL texture upload." OFF )
    option(KTX_FEATURE_STATIC_LIBRARY "Create static libraries (shared otherwise)." ON )
    if (WIN32)
        if (NOT DEFINED BASH_EXECUTABLE)
            set(BASH_EXECUTABLE "bash.exe")
        endif()
    endif()
    add_subdirectory(KTX-Software)
endif()
