#version 460

#extension GL_EXT_ray_tracing : require

#include <MatchRandom>

layout (binding = 0, rgba32f) uniform image2D ray_tracing_result_image;
layout (binding = 1) uniform accelerationStructureEXT instance;
layout (binding = 2) uniform CameraUniform {
    vec3 pos;
    mat4 view;
    mat4 project;
} camera;

layout (push_constant) uniform C {
    float time;
    int sample_count;
    int frame_count;
} c;

struct RayInfo {
    int count;
    uint rnd_state;
    vec3 color;
    vec3 albedo;
};

layout (location = 0) rayPayloadEXT RayInfo ray;

void main() {
    vec3 final_color = vec3(0);
    ray.rnd_state = uint((c.time + 1) * gl_LaunchIDEXT.x * gl_LaunchIDEXT.y);
    for (int i = 0; i < c.sample_count; i ++) {
        vec2 center = vec2(gl_LaunchIDEXT.xy) + vec2(rnd(ray.rnd_state) - 0.5, rnd(ray.rnd_state) - 0.5);
        center /= vec2(gl_LaunchSizeEXT.xy);
        center.y = 1 - center.y;
        center = center * 2 - 1;
        vec3 view_direction = (inverse(camera.view) * vec4((inverse(camera.project) * vec4(center, -1, 1)).xyz, 0)).xyz;

        ray.count = 0;
        ray.color = vec3(0);
        ray.albedo = vec3(1);
        traceRayEXT(
            instance,
            gl_RayFlagsOpaqueEXT,
            0xff,
            0, 0,
            0,
            camera.pos,
            0.001,
            view_direction,
            10000.0,
            0
        );

        final_color += ray.color;
    }
    
    float scale = 1.0 / float(c.frame_count + 1);
    vec3 old_color = imageLoad(ray_tracing_result_image, ivec2(gl_LaunchIDEXT.xy)).xyz;
    imageStore(ray_tracing_result_image, ivec2(gl_LaunchIDEXT.xy), vec4(mix(old_color, final_color / float(c.sample_count), scale), 1));
}
